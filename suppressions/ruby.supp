{
  On platforms where memcpy is safe for overlapped memory, the compiler will sometimes replace memmove with memcpy. Valgrind may report a false positive.
  Memcheck:Overlap
  fun:__memcpy_chk
  fun:memmove
  ...
}
{
  Requiring a file will add it to the loaded features, which may be reported as a leak.
  Memcheck:Leak
  ...
  fun:require_internal
  ...
}
{
  Remove this after Ruby 2.7.7, 3.0.5, 3.1.3 are relased. See: https://github.com/Shopify/ruby_memcheck/issues/6
  Memcheck:Leak
  ...
  fun:stack_chunk_alloc
  ...
}
{
  recursive_list_access creates a hash called `list` that is stored on the threadptr_recursive_hash. This is reported as a memory leak.
  Memcheck:Leak
  ...
  fun:rb_ident_hash_new
  fun:recursive_list_access
  fun:exec_recursive
  ...
}
{
  "Invalid read of size 8" when marking the stack of fibers
  Memcheck:Addr8
  fun:each_location*
  ...
}
{
  Rust probes for statx(buf), will be fixed in Valgrind >= 3.1.6.0
  Memcheck:Param
  statx(buf)
  ...
  fun:*try_statx*
  ...
}
{
  Rust probes for statx(file_name), will be fixed in Valgrind >= 3.1.6.0
  Memcheck:Param
  statx(file_name)
  ...
  fun:*try_statx*
  ...
}
{
  strscan_do_scan in strscan.c will sometimes replace the ptr of the regex, which can be reported as a memory leak if the regex is stored in an iseq. https://github.com/ruby/ruby/pull/8136
  Memcheck:Leak
  ...
  fun:rb_reg_prepare_re
  fun:strscan_do_scan
  ...
}
